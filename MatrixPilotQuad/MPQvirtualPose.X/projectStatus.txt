motorCntrl uses a full rotation matrix (R_d) to specify desired orientation

R_d is constructed from (XYZ fixed) Euler angle set cmd_RPY
cmd_RPY is generated from TX inputs using either rate mode or angle mode methods

incremental Euler angle rotations are used for control:
    desired orientation R_d(E<-B') = current orientation R_imu(E<_B) * commanded rotation R_c(B<-B')
    R_c(B<-B') := (B<-E)R_imu^T R_d(E<-B')
    (small) XYZ fixed angle rotations R_c = R_z(alpha) R_y(beta) R_z(gamma)
    
To specify the desired orientation R_d, we initialize at R_d = R_imu = I.
In angle mode, desired orientation is specified by roll, pitch and yaw:
R_d(E<-B') :=  R_z(alpha) R_y(beta) R_z(gamma)

For the PID control loop, we compute R_c as above and use the XYZ rotation
angles as the orientation error.

CONFIG_X now uses X_SIN, X_COS to rotate commanded roll/pitch into body frame
    options_quad shows +behavior for motors 1,4 with CONFIG_X defined

options.h now just includes the desired options file to allow for multiple models within one project
