Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-10-25T13:22:48.291786

====== MatrixPilotQuad ======
Created Thursday 25 October 2012

This wiki page describes the quadcopter branch of [[MatrixPilot:]]
[[gentlenav/branches/MatrixPillotQuad_MarkWhitehorn]]
at [[code.google.com|Google code]]

====== Hardware Setup ======

**Most of the channel assignments for features listed here must be set in options.h**

**Motor labels are:**

1) rear
2) left
3) front
4) right

Front and right motors should turn counter-clockwise (looking down on copter) and right and rear motors should turn clockwise. You will need tractor props on the CCW motors and pusher props on the CW motors.

**Failsafe Mux:**

It is highly recommended that you use a failsafe multiplexer to allow you to manually override the UDB if necessary to stop the motors. 

**TailLight:**

A digital output is provided to control a light (or buzzer) for annunciation purposes. It is currently used to indicate [[LiPo]] flight battery cell count, low voltage, failsafe activation and miscellaneous other conditions.

**Inflight Gain Adjustment or Flight Mode Selection:**

Uses two receiver input channels to control adjustment of a set of 3 PID gain parameters: 
Inflight gain adjustment requires a 3 position switch (flight mode on a heli radio) for selecting one of three gains. The three gains are specified in options.h (see comments in template options.h file: options_base.h). You can choose either ENABLE_FLIGHTMODE or ENABLE_GAINADJ to use the flight mode switch for either flight mode or gain parameter selection. A FAILSAFE_MUX_CHANNEL is no longer required. Specify GAIN_CHANNEL and FLIGHT_MODE_CHANNEL numbers in options.h to match your radio. 

Inflight gain adjustment is always enabled for selected gain if ENABLE_GAINADJ=1; just choose the gain to modify and increment or decrement the PWM value of GAIN_CHANNEL to change selected gain by GAIN_INC (default 0.05 in options_base.h). Gains range from 0 to 3.99.

Gains are stored in EEPROM and sent in telemetry every time there is a change. Telemetry is now sent only when throttle is above THROTTLE_DEADBAND.


====== Software Configuration ======

Most software options are set in the header file options.h.
options_base.h is a template: copy this file to options.h and make changes as necessary for your own copter.

The most important options are marked by #error directives; after you have set these options appropriately, delete the #error line.


====== Initialization ======

Warning: Remove all props for initial setup and testing. Do not install propellers until proper operation has been confirmed.

* Turn on transmitter, failsafe switch in safe mode (if available)
* Connect flight battery, red LED begins blinking
* Green LED on indicates RC signals are valid
* Keep copter stationary and level until blinking stops (10 seconds)
* Blue (and taillight) LED flashes the [[LiPo]] cell count
* Failsafe switch to flight mode
* Ready to fly
* Blue LED and tailLight flash rapidly if [[LiPo]] voltage drops below LVCELL volts/cell



===== Notes =====

* tailLight blinks rapidly if you throttle up with failsafe in safe mode (don't do this, unless you have grounded the manual inputs to the failsafe mux)


====== FAQ ======

* 1. Should the radio be setup as Airplane or Helicopter? If Heli, what Swash Type?
Plane ! No swash etc. Simply four control as it would be an airplane.

* 2. Should be ESC have motor braking enabled?
No

* 3. Is GPS required in the current version? 
No GPS required for manual flight modes. It should fly OK in TILT_MODE and COMPASS_MODE without a GPS. 
COMPASS_MODE requires a magnetometer and currently maps forward stick to North, right stick to East regardless of quadcopter heading.

* 4. When landing, does the UDB need to be physically reset?
No

* 5. Why do some motors stop when I'm trying to take off?

I suggest that you zero out the integral gains (TILK_KI and YAW_KI) and ACCEL_K for your initial flight tests. Once you have the KP, KD and KDD gains about right, you can add in some integral gain to eliminate steady state errors. Your motors are probably stopping due to windup of the yaw error integrator while sitting on the ground. If that's the problem, it will go away with YAW_KI set to zero.

