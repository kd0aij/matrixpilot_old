"""Subclass of MainFrameBase, which is generated by wxFormBuilder."""


import wx
import gui
import SubFunctionBlocks as FBlocksAPI
import subMAVFunctionSettings as MAVFSettingsAPI
import ValueEditor
import VirtualEditor
import pyCFiles as CFileGen
import SubpyFEditSettings as FESettings
import SubpyFEditProject as FEProject
import MAVlinkProcesses
import struct, array
import time 

import sys,os
#import scanwin32


def PercentToQ14(percent):
    try:
        val = float(percent)
    except:
        val = 0.0;
    return (int) (val * 163.84)

class fifo(object):
    def __init__(self):
        self.buf = []
    
    def write(self, data):
        self.buf += data
        return len(data)
    
    def read(self):
        return self.buf.pop(0)
    
# find the mavlink.py module
for d in [ 'pymavlink',
          os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'MAVLink', 'pymavlink') ]:
    if os.path.exists(d):
        sys.path.insert(0, d)

    
#        if os.name == 'nt':
#            try:
#                # broken python compilation of mavlink.py on windows!
#                os.unlink(os.path.join(d, 'mavlink.pyc'))
#            except:
#                pass
import mavutil

# Implementing MainFrameBase
class MainFrame( gui.MainFrameBase ):
    def __init__( self, parent ):
        gui.MainFrameBase.__init__( self, parent )


    def start( self ):

        self.MAVProcesses = MAVlinkProcesses.mavlink_processes()

        # determine if application is a script file or frozen exe
        if hasattr(sys, 'frozen'):
            self.application_path = os.path.dirname(sys.executable)
        elif __file__:
            self.application_path = os.path.dirname(__file__)
            
        self.data_path = os.path.join(self.application_path, "..", "..", "data", "mixer");

        self.settings_path = os.path.join(self.data_path, "Settings.xml")

        self.Settings = FESettings.parse(self.settings_path)
        
        self.function_blocks_path = os.path.join(self.data_path, "FunctionBlocks.xml")
        
        self.FBlocksMain = FBlocksAPI.parse(self.function_blocks_path)
        FBlockNames = []
        self.FBlocks = self.FBlocksMain.get_functionBlock()
        for item in self.FBlocks:
            FBlockNames.append(item.header.name)
        self.m_listBoxFuncType.InsertItems(FBlockNames, 0)

        self.exportPath = ''

        self.m_openProject( )


    # Document handling

    def m_openProject( self ):
        if(os.path.isfile(self.Settings.ProjectPath)):
            self.Project = FEProject.parse(self.Settings.ProjectPath)
            statusText = "Project: " + self.Settings.ProjectPath
        else:
            self.Project = FEProject.parse("DefaultProject.fep")
            statusText = "Project: DefaultProject.fep"
            
        self.m_statusBar.SetStatusText(statusText , 0)

        if(os.path.isfile(self.Project.FunctionSettingsPath)):
            self.m_openSettingsFile(self.Project.FunctionSettingsPath)
        else:
            self.m_openSettingsFile("DefaultSettings.feset")
            self.Project.FunctionSettingsPath = "DefaultSettings.feset"

        self.selectedFunctionIndex = 0
        self.selectedRegisterIndex = 0
        self.m_paramsEditIndex = -1
        


    def m_openSettingsFile( self, filepath ):
        self.MAVFSettings = MAVFSettingsAPI.parse(filepath)

        self.selectedFunctionIndex = 0
        self.selectedRegisterIndex = 0

        self.Project.FunctionSettingsPath = filepath
        statusText = "Function Settings: " + self.Project.FunctionSettingsPath
        self.m_statusBar.SetStatusText(statusText, 1)
        
        if(self.MAVFSettings.get_inputRegs() == None):
            try:
                inputRegs = MAVFSettingsAPI.inputsSub()
                self.MAVFSettings.set_inputRegs(inputRegs)

                inputReg = MAVFSettingsAPI.inputSub("PWIN_ROLL")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("PWIN_PITCH")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("PWIN_YAW")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("PWIN_THROTTLE")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("PWIN_FLAP")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("PWIN_CAMBER")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("PWIN_BRAKE")
                self.MAVFSettings.inputRegs.input.append(inputReg)

                inputReg = MAVFSettingsAPI.inputSub("APCON_ROLL")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("APCON_PITCH")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("APCON_YAW")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("APCON_THROTTLE")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("APCON_FLAP")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("APCON_CAMBER")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("APCON_BRAKE")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("APCON_WAGGLE")
                self.MAVFSettings.inputRegs.input.append(inputReg)

                inputReg = MAVFSettingsAPI.inputSub("APMODE_FULL")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("RADIO_MANUAL_MODE")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("APMODE_RADIO_ON")
                self.MAVFSettings.inputRegs.input.append(inputReg)
                inputReg = MAVFSettingsAPI.inputSub("GAIN_MAN_MIX")
                self.MAVFSettings.inputRegs.input.append(inputReg)

            except:
                print("summat wrong")
                
        
        if(self.MAVFSettings.get_outputRegs() == None):
            try:
                outputRegs = MAVFSettingsAPI.outputsSub()
                self.MAVFSettings.set_outputRegs(outputRegs)

                outputReg = MAVFSettingsAPI.outputSub("AILERON_L")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("ELEVATOR")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("THROTTLE")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("RUDDER")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("AILERON_R")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("FLAPMID_L")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("FLAPMID_R")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("FLAP_L")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("FLAP_R")
                self.MAVFSettings.outputRegs.output.append(outputReg)
                outputReg = MAVFSettingsAPI.outputSub("SPOILER")
                self.MAVFSettings.outputRegs.output.append(outputReg)
            except:
                print("summat else wrong")

        self.m_refreshSettingsGrid()

    def m_saveSettingsFile( self, filepath ):
        if filepath == "":
            filepath = self.Project.FunctionSettingsPath;

        FILE = open(filepath, "w")

        self.MAVFSettings.export( FILE , 0 )

        self.Project.FunctionSettingsPath = filepath
        statusText = "Function Settings: " + self.Project.FunctionSettingsPath
        self.m_statusBar.SetStatusText(statusText, 1)                


    def m_findRegisterIndexWithName ( self, regName ):
        index = 0
        for item in self.registers:
            if regName == item.identifier:
                return index
            index = index + 1
        return -1

    def m_findTypeIndexWithName ( self, typeName ):
        print('Searching for function type ', typeName)
        index = 0
        for FBlock in self.FBlocks:
            if FBlock.header.name == typeName:
                return index
            index = index + 1
        return -1

        

    def m_refreshSettingsGrid( self ):

        self.refreshingSettingsGrid = True

        self.registers = self.MAVFSettings.registers.register
        self.FSettings = self.MAVFSettings.functions.function

        self.m_gridFBs.DeleteCols(0, self.m_gridFBs.GetNumberCols())
        self.m_gridFBs.DeleteRows(0, self.m_gridFBs.GetNumberRows())

        index = 0
        for item in self.registers:
            self.m_gridFBs.AppendCols(1)
            self.m_gridFBs.SetColLabelValue(index, item.identifier)
            index = index + 1

        index = 0
        for item in self.FSettings:
            self.m_gridFBs.AppendRows(1)
            self.m_refreshSettingsGridFunction( index )
            index = index + 1

        if(self.m_checkBoxAutoUpdate.GetValue() == True):
            self.m_mavlinkUpdate()

        self.m_gridFBs.AutoSizeColumns()

        self.refreshingSettingsGrid = False


    def m_refreshSettingsGridFunction( self, funcIndex):
        function = self.MAVFSettings.functions.function[funcIndex]
        destRegStr = function.header.destReg
        funcTypeStr = function.header.functionType
        funcAction = function.header.action
        regColumn = self.m_findRegisterIndexWithName(destRegStr)
        if regColumn == -1:
            print("ERROR: Could not find register with name " + destRegStr)
            return
        self.m_gridFBs.SetCellValue(funcIndex, regColumn, funcTypeStr)

        funcTypeIndex = self.m_findTypeIndexWithName( funcTypeStr )

        actionIndex = -1

        if funcAction == 'SET':
            self.m_gridFBs.SetCellTextColour(funcIndex,regColumn, wx.TheColourDatabase.Find("red") )
            actionIndex = 0
        elif funcAction == 'ADD':
            self.m_gridFBs.SetCellTextColour(funcIndex,regColumn, wx.TheColourDatabase.Find("black") )
            actionIndex = 1
        elif funcAction == 'CLEAR':
            self.m_gridFBs.SetCellTextColour(funcIndex,regColumn, wx.TheColourDatabase.Find("grey") )
            actionIndex = 2

        paramIndex = 0
        for parameter in function.setting:
            paramType = self.FBlocks[funcTypeIndex].setting[paramIndex].type_
            paramValue = self.MAVFSettings.functions.function[funcIndex].setting[paramIndex].value
            if paramType == 'Register':
                refIndex = self.m_findRegisterIndexWithName(parameter.value)
                if refIndex <> -1:
                    self.m_gridFBs.SetCellBackgroundColour(funcIndex, refIndex, wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHT) )
            paramIndex = paramIndex + 1



    def m_refreshParametersGrid ( self ):
        if self.refreshingSettingsGrid == True:
            return

        print("refreshing parameter grid")
        for col in range(self.m_gridParameters.GetNumberCols()):
            for row in range(self.m_gridParameters.GetNumberRows()):
                self.m_gridParameters.SetCellValue(row, col, "")

        if self.selectedFunctionIndex <> -1:
            searchFuncType = self.MAVFSettings.functions.function[self.selectedFunctionIndex].header.functionType
            foundTypeIndex = self.m_findTypeIndexWithName( searchFuncType )             

            index = 0
            if(len(self.MAVFSettings.functions.function[self.selectedFunctionIndex].setting) > 0):
                for item in self.MAVFSettings.functions.function[self.selectedFunctionIndex].setting:
                    print("adding to parameter grid, foundType={:d}".format(foundTypeIndex))
                    typeData = self.FBlocks[foundTypeIndex].setting[index].type_
                    description = self.FBlocks[foundTypeIndex].setting[index].description                              
                    self.m_gridParameters.SetCellValue(index, 0, item.name)
                    self.m_gridParameters.SetCellValue(index, 1, item.value)
                    self.m_gridParameters.SetCellValue(index, 2, typeData)
                    self.m_gridParameters.SetCellValue(index, 3, description)
                    index = index + 1

            self.m_comboAction.SetValue(self.MAVFSettings.functions.function[self.selectedFunctionIndex].header.action)
            
    def m_selFunctionAtIndex ( self, index ):
        self.selectedFunctionIndex = index
        self.m_refreshParametersGrid()

    def m_clearSelectedFunctionParamList ( self ):
        del self.MAVFSettings.functions.function[self.selectedFunctionIndex].setting[:]
        print("clear parameters from function")

    def m_changeSelectedFunctionType ( self, functionTypeIndex ):
        self.m_clearSelectedFunctionParamList()
        prntstr = 'Change selected function type, function{:d}, type index{:d}'.format(self.selectedFunctionIndex, functionTypeIndex)
        print(prntstr)
        sourceFBlock = self.FBlocks[functionTypeIndex]
        self.MAVFSettings.functions.function[self.selectedFunctionIndex].header.functionType = sourceFBlock.header.name
        print("Setting function to name ", self.MAVFSettings.functions.function[self.selectedFunctionIndex].header.functionType)
        for item in self.FBlocks[functionTypeIndex].setting:
            newParameter = MAVFSettingsAPI.functionBlockDataSub(item.name, item.default)
            self.MAVFSettings.functions.function[self.selectedFunctionIndex].setting.append(newParameter)
            print("insert new parameter into function")
        self.m_refreshParametersGrid()
        self.m_refreshSettingsGrid()

    def m_menuGetUniqueRegisterName ( self ):
        found = False
        index = 1
        
        while found == False:
            searchStr = 'NULL_{:d}'.format(index)
            match = False
            for register in self.registers:
                if register.identifier == searchStr:
                    match = True
            if match == False:
                found = True
            index = index + 1
        return searchStr
            
                
    
    # Handlers for MainFrameBase events.

    def m_listBoxFuncTypeDClick ( self, event ):
        selections = self.m_listBoxFuncType.GetSelections()
        if len(selections) > 0:
            print("function type change")
            self.m_changeSelectedFunctionType( selections[0] )
        self.m_gridFBs.MakeCellVisible( self.selectedFunctionIndex, self.selectedRegisterIndex )
        event.Skip()

    def m_menuAddRegister ( self, event ):
        regstring = self.m_menuGetUniqueRegisterName()          #'NULL_{:d}'.format(len(self.registers) + 1)
        newreg = MAVFSettingsAPI.registerSub(regstring, "Does nothing")
        self.registers.append(newreg)
        self.m_refreshSettingsGrid()
        self.m_gridFBs.MakeCellVisible( self.selectedFunctionIndex, self.selectedRegisterIndex )
        event.Skip()

    def m_menuInsertRegister ( self, event ):
        regstring =  self.m_menuGetUniqueRegisterName()         #'NULL_{:d}'.format(len(self.registers) + 1)
        newreg = MAVFSettingsAPI.registerSub(regstring, "Does nothing")
        self.registers.insert( self.selectedRegisterIndex, newreg)
        self.m_refreshSettingsGrid()
        self.m_gridFBs.MakeCellVisible( self.selectedFunctionIndex, self.selectedRegisterIndex )
        event.Skip()

    def m_menuDeleteRegister ( self, event ):
        self.registers.pop(self.selectedRegisterIndex)
        self.selectedRegisterIndex = 0
        self.m_refreshSettingsGrid()        
        self.m_gridFBs.MakeCellVisible( self.selectedFunctionIndex, self.selectedRegisterIndex )
        event.Skip()

    def m_menuAddFunction ( self, event ):
        newFHeader = MAVFSettingsAPI.functionBlockHeaderSub("NULL", "NULL", "CLEAR", "Do nothing")
        newFSettings = []
        newfunc = MAVFSettingsAPI.functionSub(newFHeader, newFSettings)
        self.MAVFSettings.functions.function.append(newfunc)
        self.m_refreshSettingsGrid()
        self.m_gridFBs.MakeCellVisible( self.selectedFunctionIndex, self.selectedRegisterIndex )
        event.Skip()        

    def m_menuInsertFunction ( self, event ):
        newFHeader = MAVFSettingsAPI.functionBlockHeaderSub("NULL", "NULL", "CLEAR", "Do nothing")
        newFSettings = []
        newfunc = MAVFSettingsAPI.functionSub(newFHeader, newFSettings)
        self.MAVFSettings.functions.function.insert(self.selectedFunctionIndex, newfunc)
        self.m_refreshSettingsGrid()
        self.m_gridFBs.MakeCellVisible( self.selectedFunctionIndex, self.selectedRegisterIndex )
        event.Skip()

    def m_menuDeleteFunction ( self, event ):
        self.MAVFSettings.functions.function.pop(self.selectedFunctionIndex)
        self.selectedFunctionIndex = 0
        self.m_refreshSettingsGrid()        
        self.m_gridFBs.MakeCellVisible( self.selectedFunctionIndex, self.selectedRegisterIndex )
        event.Skip()

            
    def m_FBs_cell_click ( self, event ):
        if self.refreshingSettingsGrid == False:
            print("Click cell on row", event.GetRow() )
            self.selectedRegisterIndex = event.GetCol()
            self.m_selFunctionAtIndex(event.GetRow())
        event.Skip()

    def m_FBs_cell_dclick ( self, event ):
        self.selectedFunctionIndex = event.GetRow()
        self.selectedRegisterIndex = event.GetCol()
        identifier = self.MAVFSettings.registers.register[event.GetCol()].identifier
        print("double cell click")
        self.MAVFSettings.functions.function[event.GetRow()].header.destReg = identifier
        self.m_refreshSettingsGrid()
        self.m_gridFBs.MakeCellVisible( event.GetRow(), event.GetCol() )
        event.Skip()

    def m_FBs_label_click ( self, event ):
        self.selectedRegisterIndex = event.GetCol()
        print("label click")

        if self.m_paramsEditIndex == -1:
            event.Skip()
            print("no parameter being edited")
            return
        
        if self.m_gridParameters.IsCellEditControlEnabled():
            if self.m_gridParameters.GetCellValue(self.m_paramsEditIndex, 2) != 'Register':
                print("not a Eegister type, value not set")
                event.Skip()
                return
            print("params edit set to label value")
            editCntrl = self.m_gridParameters.GetCellEditor(self.m_paramsEditIndex, 1)
            regName = self.MAVFSettings.registers.register[event.GetCol()].identifier

            self.m_gridParameters.SetCellValue(self.m_paramsEditIndex, 1, regName)
            self.MAVFSettings.functions.function[self.selectedFunctionIndex].setting[self.m_paramsEditIndex].value = regName
            print('Changing function ', self.selectedFunctionIndex, ' parameter ', self.m_paramsEditIndex, ' to ', regName)
            self.m_refreshSettingsGridFunction( self.selectedFunctionIndex )
            self.m_paramsEditIndex == -1
        event.Skip()

    def   m_FBs_right_click ( self, event ):
        self.PopupMenu( self.m_menuGrid ) 
        event.Skip()

    def   m_FBs_regEdit ( self, event ):
        regNameEditor = ValueEditor.ValueEditDialog( self )
        regNameEditor.m_textCtrlRegNameEdit.SetValue(self.m_gridFBs.GetColLabelValue( event.GetCol() ))
        regNameEditor.ShowModal()
        newRegName = str(regNameEditor.m_textCtrlRegNameEdit.GetValue())
        if newRegName.find(" ") != wx.NOT_FOUND:
            print("No spaces allowed in register names")
            event.Skip()
            return
        if len(newRegName) > 15:
            print("Name too long, reduce to less than 15 characters, no spaces")
            event.Skip()
            return
        if len(newRegName) == 0:
            print("Must be at least one character long")
            event.Skip()
            return
        self.MAVFSettings.registers.register[ event.GetCol() ].identifier = newRegName
        self.m_refreshSettingsGrid()
        self.m_gridFBs.MakeCellVisible( event.GetRow(), event.GetCol() )
        event.Skip()

    def   m_panelFBsize ( self, event ):
        frameSize = self.m_panelFBs.GetSize()
        gridSize = self.m_gridFBs.GetMaxSize()

        gridSize.SetWidth(frameSize.GetWidth() - 5)
        gridSize.SetHeight(frameSize.GetHeight() - 5)
        self.m_gridFBs.SetMaxSize(gridSize)
        self.m_gridFBs.SetMinSize(gridSize)
        event.Skip()

    def   m_comboSetAction ( self, event ):
        selString = self.m_comboAction.GetValue()
        self.MAVFSettings.functions.function[self.selectedFunctionIndex].header.action = selString
        self.m_refreshSettingsGridFunction( self.selectedFunctionIndex )
        event.Skip()

    def   m_ParamsCellSelect ( self, event ):
        self.m_paramsSelectIndex = event.GetRow()
        paramTypeName = self.m_gridParameters.GetCellValue(event.GetRow(), 2)
        paramValue = self.m_gridParameters.GetCellValue(event.GetRow(), 1)
        if paramTypeName == 'Percent':
            self.m_sliderParamValue.SetRange(-150, 150)
            self.m_sliderParamValue.SetTick(25)
            paramValInt = int(float(paramValue))
            self.m_sliderParamValue.SetValue(paramValInt)
            self.m_sliderParamValue.Enable()
        else:                
            self.m_sliderParamValue.Disable()
        event.Skip()                


    def   m_ParamsEditShow ( self, event ):
        print("params edit show")
        if event.GetCol() <> 1:
            self.m_paramsEditIndex = -1
        else:
            self.m_paramsEditIndex = event.GetRow()
            self.preEditParamValue = self.m_gridParameters.GetCellValue(event.GetRow(), event.GetCol() )
        event.Skip()                

    def   m_ParamsEditHide ( self, event ):
        print("params edit hide")
        CellEditor = self.m_gridParameters.GetCellEditor(event.GetRow(), event.GetCol())
#       self.m_paramsEditIndex = -1
        if event.GetCol() <> 1:
            CellEditor.Reset()
            print("params edit reset value")
            event.Skip()
            return
        event.Skip()

    def   m_ParamsCellChange ( self, event ):
        if event.GetCol() <> 1:
            self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
            event.Skip()
            return           
            
        paramTypeName = self.m_gridParameters.GetCellValue(event.GetRow(), 2)
        paramEditStr = self.m_gridParameters.GetCellValue(event.GetRow(),1)
        if paramTypeName == 'Register':
            if self.m_findRegisterIndexWithName( paramEditStr ) == -1:
                print("ERROR: Could not find register with name " + paramEditStr )
                print("Reset editor value")
                self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                event.Skip()
                return
        if paramTypeName == 'Percent':
            try:
                percent = float(paramEditStr)
                if percent > 150:
                    self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                    print("Percent over 150, Reset editor value")
                    event.Skip()
                    return
                if percent < -150:
                    self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                    print("Percent under -150, Reset editor value")
                    event.Skip()
                    return
            except ValueError:
                self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                print("Invalid value, Reset editor value")
                event.Skip()
                return
        if paramTypeName == 'int16':
            try:
                int16 = int(paramEditStr)
                if int16 > 32767:
                    self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                    print("int16 over range, Reset editor value")
                    event.Skip()
                    return
                if int16 < -32767:
                    self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                    print("int16 under range, Reset editor value")
                    event.Skip()
                    return
            except ValueError:
                self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                print("Invalid value, Reset editor value")
                event.Skip()
                return
        if paramTypeName == 'int14':
            try:
                int14 = int(paramEditStr)
                if int14 > 8192:
                    self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                    print("int14 over range, Reset editor value")
                    event.Skip()
                    return
                if int14 < -8192:
                    self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                    print("int14 under range, Reset editor value")
                    event.Skip()
                    return
            except ValueError:
                self.m_gridParameters.SetCellValue(event.GetRow(), event.GetCol(), self.preEditParamValue)
                print("Invalid value, Reset editor value")
                event.Skip()
                return
        #if paramTypeName == 'Fractional':

        newValue = self.m_gridParameters.GetCellValue(event.GetRow(), 1)
        self.MAVFSettings.functions.function[self.selectedFunctionIndex].setting[event.GetRow()].value = newValue
        print('Changing function ', self.selectedFunctionIndex, ' parameter ', event.GetRow(), ' to ', newValue)

        self.m_refreshSettingsGridFunction( self.selectedFunctionIndex )
        
        self.m_mavlinkUpdateFunction(self.selectedFunctionIndex)
            
        event.Skip()


    def m_scrollParamValue ( self, event ):
        if self.m_paramsSelectIndex == -1:
            event.Skip()
            return
        if self.m_sliderParamValue.IsEnabled() == False:
            event.Skip()
            return

        paramTypeName = self.m_gridParameters.GetCellValue(self.m_paramsSelectIndex, 2)
        if paramTypeName == 'Percent':
            newStrValue = "{:d}".format(self.m_sliderParamValue.GetValue())
            self.m_gridParameters.SetCellValue(self.m_paramsSelectIndex, 1,  newStrValue)
            self.MAVFSettings.functions.function[self.selectedFunctionIndex].setting[self.m_paramsSelectIndex].value = newStrValue
        event.Skip()

    def m_scrollParamRelease(self, event ):
        self.m_mavlinkUpdateFunction(self.selectedFunctionIndex)
        event.Skip()


    def m_btClick_Connect ( self, event ):
  
        self.m_btUpdate.Enable(True)

        self.m_gridFBs.Enable(False)
        self.m_scrolledWindowFuncParams.Enable(False)
        self.Refresh()

        if(self.m_checkBoxAutoUpdate.GetValue() == True):
            time.sleep(2)
            self.m_mavlinkUpdate()
        else:
            self.m_gridFBs.Enable(True)
            self.m_scrolledWindowFuncParams.Enable(True)

        event.Skip()




    def m_mavlinkUpdateFunction ( self, functionIndex ):

        try:
            self.MAVProcesses
        except:
            return

        if(self.m_checkBoxAutoUpdate.GetValue() == False):
            self.MAVProcesses.set_not_synchronised()
            return

        if(self.MAVProcesses.services_running() == False):
            return
        

        if(self.MAVProcesses.is_synchronised() == False):
            self.m_mavlinkUpdate()
            return
        
        print("Starting single function update")
        self.m_gridFBs.Enable(False)
        self.m_scrolledWindowFuncParams.Enable(False)

        self.registers = self.MAVFSettings.registers.register
        self.FSettings = self.MAVFSettings.functions.function

        index = 0

        try :
            self.MAVProcesses
        except:
            pass
        else:
            self.MAVProcesses.send_function(self.m_mavlinkUpdateFunction_callback, functionIndex)


  
    def m_mavlinkUpdateFunction_callback(self, result):
        if(result == False):
            self.MAVProcesses.set_not_synchronised()
        self.m_gridFBs.Enable(True)
        self.m_scrolledWindowFuncParams.Enable(True)
        self.Refresh()

    def m_mavlinkUpdate ( self ):
        try:
            self.MAVProcesses
        except:
#            dlg = wx.MessageDialog(self, "MAVlink processes not running, connect to MAV first", "WARNING", wx.OK)
#            dlg.ShowModal()
            print("MAVlink services not running, can't update")            
            return

        if(self.MAVProcesses.services_running() == False):
#            dlg = wx.MessageDialog(self, "MAVlink processes not running, connect to MAV first", "WARNING", wx.OK)
#            dlg.ShowModal()
            print("MAVlink services not running, can't update")            
            return
        
        print("Starting update")
        self.m_gridFBs.Enable(False)
        self.m_scrolledWindowFuncParams.Enable(False)

        self.registers = self.MAVFSettings.registers.register
        self.FSettings = self.MAVFSettings.functions.function

        index = 0

        try :
            self.MAVProcesses
        except:
            pass
        else:
            self.MAVProcesses.send_functions(self.m_mavlinkUpdate_callback)

           
    def m_mavlinkUpdate_callback(self, result):
        self.m_gridFBs.Enable(True)
        self.m_scrolledWindowFuncParams.Enable(True)
        self.Refresh()

    def m_btClick_Update ( self, event):
        self.m_mavlinkUpdate()
        event.Skip()

        
    def m_mniOpenSettingsClick( self, event ):
        fdlg = wx.FileDialog(self,"Open a settings file",wx.EmptyString,wx.EmptyString,"*.feset",wx.FD_OPEN | wx.FD_FILE_MUST_EXIST);
        if fdlg.ShowModal() != wx.ID_OK:
            return;
        self.m_openSettingsFile(fdlg.GetPath())
            
    def m_mniSaveSettingsClick( self, event ):
        self.m_saveSettingsFile("")

    def m_mniSaveSettingsAsClick( self, event ):
        fdlg = wx.FileDialog(self, "Save the settings file as", wx.EmptyString, wx.EmptyString, "*.feset", wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT);
        if fdlg.ShowModal() != wx.ID_OK:
            return;
        self.m_saveSettingsFile(fdlg.GetPath())

        
    def m_mniOpenProjectClick( self, event ):
        fdlg = wx.FileDialog(self,"Open a settings file",wx.EmptyString,wx.EmptyString,"*.fep",wx.FD_OPEN | wx.FD_FILE_MUST_EXIST);
        if fdlg.ShowModal() != wx.ID_OK:
            return;
        self.Settings.ProjectPath = fdlg.GetPath()
        self.m_openProject()
            
    def m_mniSaveProjectClick( self, event ):
        self.Project.SystemID = int(self.m_textCtrlSysID.GetValue())
        self.Project.ComponentID = int(self.m_textCtrlCompID.GetValue())

        FILE = open(self.Settings.ProjectPath, "w")
        if(not FILE.closed):            
            try:
                self.Project.export( FILE , 0 )
            except:
                print("could not export project file")
        

    def m_mniSaveProjectAsClick( self, event ):
        fdlg = wx.FileDialog(self, "Save the project file as", wx.EmptyString, wx.EmptyString, "*.fep", wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT);
        if fdlg.ShowModal() != wx.ID_OK:
            return;
        
        self.Project.SystemID = int(self.m_textCtrlSysID.GetValue())
        self.Project.ComponentID = int(self.m_textCtrlCompID.GetValue())

        FILE = open(fdlg.GetPath(), "w")
        try:
            self.Project.export( FILE , 0 )
        except:
            print("could not export project")
        else:
            self.Settings.ProjectPath = fdlg.GetPath()

    def m_mnExportCHeaders( self, event ):
        fdlg = wx.DirDialog(self);
        fdlg.SetPath(self.exportPath)
        if fdlg.ShowModal() != wx.ID_OK:
            return;

        self.exportPath = fdlg.GetPath()
        
        Files = CFileGen.CFiles()
        Files.writeFiles(self.exportPath, "FlexiFunciton", self.MAVFSettings, self.FBlocks)
            
    def m_mnEditVirtualisation(self, event ):
        VirtualEdit = VirtualEditor.VirtualEditDialog( self )
        
        VirtualEdit.ShowModal()
            
    def m_mnCommitToNV(self, event ):
        try:
            self.MAVProcesses
        except:
            dlg = wx.MessageDialog(self, "MAVlink processes not running, connect to MAV first", "WARNING", wx.OK)
            dlg.ShowModal()
            return

        if(self.MAVProcesses.services_running() == False):
            dlg = wx.MessageDialog(self, "MAVlink processes not running, connect to MAV first", "WARNING", wx.OK)
            dlg.ShowModal()       
            return        
        
        dlg = wx.MessageDialog(self, "CONFIRM WRITE TO NON VOLATILE MEMORY", "NV memory write")
        if(dlg.ShowModal() != wx.ID_OK):
            return
        
        self.MAVProcesses.commit_buffer_to_nvmem();
        
            
    def m_mniExitClick( self, event ):
        if self.MAVProcesses.services_running():
            self.MAVProcesses.stop_services()
#                try:
#                        FILE = open(self.settings_path, "w")
#               self.Settings.export( FILE , 0 )
#           except:
#                        self.Close()
#                        event.Skip()
#                        return

        #self.Close()
        FILE = open(self.Settings.ProjectPath, "w")
        if(not FILE.closed):            
            try:
                self.Project.export( FILE , 0 )
            except:
                print("could not export project file")
                
        FILE = open(self.settings_path, "w")
        if(not FILE.closed):            
            try:
                self.Settings.export( FILE , 0 )
            except:
                print("could not export settings file")
                
        event.Skip()
    
    def m_mniAboutClick( self, event ):
        wx.MessageBox("oneminutepython template. ","oneminutepython")
    


