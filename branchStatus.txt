Branch MatrixPilot_mw4 status: created July 2013

16 July: successful test flight in manual, stabilized and auto (waypoints) mode
	Addiction aircraft with production sample UDB5 and 3DR LEA6 GPS module using
	the same options.h settings as AVC, but with race mode off
	* need to reduce elevator boost and auto mode bank angle
	* logfile apparently corrupt; check mavlink baud rate

19 July: began testing 64mips option
	*** note that analog2digital_udb4/5 are hard-coded for 16mips
	fixed bug in mpu.c: incorrect oscillator setting for 32MIPS

21 July: 40 MIPS support for UDB5 working, fixed ADC support for UDB5 (it was burning
	about 10% of the cpu at all speeds) now set to sample at ~25KHz regardless
	of FCY frequency.
	Tested udb5 at 16, 32 and 40MIPS: 8%, 4% and 3% cpu load, respectively.

	changed AUAV3 ADC driver to sample at 25KHz instead of 500KHz
	* appears to be working correctly at 16MIPS, but not at 32 or 64
	* at 32mips, IMU works correctly for a brief period but usually fails while still
	  in acquiringS state
	* cpu load 11% at 16mips, 3% higher than udb5

22 July:
	validated new version of analog2digital_auav3.c with 25KHz sample rate
	* MAVlink now reporting ACSP1 CSV (battery voltage) correctly in millivolts

23 July:
	modified cpu load measurement to use 32 bit timer 8/9 when USE_MCU_IDLE==1
	tested with USE_MCU_IDLE==1 at:
	70MIPS: load 2.6%
	64MIPS: load 2.9%	check: 2.6 * (70/64) = 2.84
	16MIPS: load 11.4%	check: 2.6 * (70/16) = 11.38 => cpu load scales linearly with MIPS

Bug??? using COF linker output format, linking with static lib VectorMatrix.a doesn't work

26 July: bench tested at 40mips: cpu load showing 4.6% with mavlink
	move magnetometerOptions.h from libUDB to MatrixPilot/projectSpecific
	and modify rmat.c include statement

28 July: start finishing up the HEARTBEAT_HZ parameterization; changes needed to all
	the GPS drivers and to rmat.c

29 July: add a MAVlink non-blocking debug I/O option: text strings display in the
	QGroundControl Communication Console; controlled by macro USE_MAVLINK_DBGIO

1 August: test at 120Hz heartbeat on UDB4: cpu load < 7%

2 August: port ring buffer and sofware flow control for OpenLog from MatrixPilotMulti
	test on UDB4 at 40MIPS and 40Hz heartbeat
	still need to separate DCM rate from PID rate

3 August: implement 200Hz IMU updates with HEARTBEAT_HZ set to 200Hz
	protect mavlink packet writes to ring buffer by raising IPL to 6 during copy
	bench test on AUAV3

4 August: flight tested AUAV3 with latest rev: 200 Hz heartbeat and 70MIPS
	TODO: look for problems with estimated airspeed; there seems to be a slow
	(period of several seconds) oscillation about the GPS groundspeed.

8 August: road tested fix to IMUvelocity and estimated airspeed; modified a drift
	correction integration gain in deadReckoning.c. Resulting IMUvelocity seems
	good; this velocity is in the Earth frame, with Y axis pointing North and X
	axis pointing East.

10 August: added conditionals for UDB4 to operate without MPU6000 at 200Hz DCM rate
	needs flight testing

11 August: Peter Hollands flight tested r2888 with UDB4. No problems and good crosswind
	navigation. Magnetometer not enabled, mavlink telemetry at 57.6K baud.

3 September: moved macro definitions for USE_RING_BUFFER, USE_MAVLINK_DBGIO and
	board type from project settings to options.h to avoid confusion. This change
	deletes macros UDB4, UDB5 and AUAV3 which were redundant to BOARD_TYPE.

18 September: upgrade to MPLAB X v1.90

28 September: turn off heartbeat timer T1 for UDB5 and AUAV3. Instead set T1
	interrupt flag in the MPU6000 ISR to make it the heartbeat timer and sync
	the heartbeat loop to MPU6000 sensor data updates. This leaves the UDB4
	logic unchanged and still driven by T1 at HEARTBEAT_HZ. Note that a heartrate
	of 200Hz is currently hardwired in MPU6000_init16() (this is the maximum available
	rate from the MPU6000 when using its internal digital filters).

	modify udb_servo_callback_prepare_outputs() to call send_HILSIM_outputs() at 40Hz.
	This fixes waypoint following using Xplane10.

29 September:
	added macro SOFTWARE_FLOW_CONTROL in MAVLink.c to disable software flow control
  This allows using the ring buffer with 2-way binary telemetry, but OpenLog will
	drop bytes at high throughput rates. For high speed logging, set SOFTWARE_FLOW_CONTROL
  nonzero, use this version of OpenLog: github.com/kd0aij/OpenLog/tree/master/OpenLog_v3_Light
  and DON'T uplink binary data.
